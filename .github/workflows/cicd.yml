# Stages:
# 1. Test & Quality: Linting, unit tests, and SonarQube analysis.
# 2. Build & Scan: Docker image build and vulnerability scanning with Trivy.
# 3. Publish: Publication of the Docker image and Helm Chart to ECR (as OCI).
# 4. Deploy Infra: Deployment of the base infrastructure with Terragrunt.
# 5. Deploy App: Deployment of the application to EKS using the Helm Chart from the registry.
# 6. Test Release: Helm test to verify the deployment.
# 7. Preview Helm Chart: Generate and comment the Helm template on PRs for review.
# This GitHub Actions workflow implements a DevSecOps CI/CD pipeline for a Python application
# deployed on AWS EKS, using Terragrunt for infrastructure management and Helm for application deployment.

name: DevSecOps CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  # --- NEW JOB: LINT & VALIDATE INFRA ---
  lint-validate-infra:
    name: Lint & Validate IaC
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Terragrunt
        uses: gruntwork-io/setup-terragrunt@v1
      - name: Terragrunt Validate
        run: |
          cd infra
          terragrunt run-all validate
      - name: Terraform Fmt Check
        run: |
          cd infra
          terragrunt run-all fmt --check

  # --- STAGE 1: TEST & LINT ---
  lint-and-test:
    name: Lint & Test Python App
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: pip install -r app/requirements-dev.txt
      - name: Run tests with pytest
        run: pytest app/tests/

  # --- STAGE 1: CODE QUALITY ANALYSIS ---
  code-quality-sonar:
    name: SonarQube Code Quality
    needs: lint-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Required for an accurate SonarQube analysis
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  # --- STAGE 2: DOCKER IMAGE BUILD ---
  build-docker-image:
    name: Build Docker Image
    needs: [lint-and-test, lint-validate-infra] # Now also depends on IaC validation
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    outputs:
      image_tag: ${{ steps.tag.outputs.tag }}
      ecr_repo: ${{ steps.environment.outputs.ecr_repo }}
      ecr_registry: ${{ steps.login-ecr.outputs.registry }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Determine Environment
        id: environment
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "env=pro" >> $GITHUB_OUTPUT
            echo "aws_region=eu-west-1" >> $GITHUB_OUTPUT
            echo "ecr_repo=hello-birthday-pro" >> $GITHUB_OUTPUT
          else
            echo "env=staging" >> $GITHUB_OUTPUT
            echo "aws_region=eu-west-1" >> $GITHUB_OUTPUT
            echo "ecr_repo=hello-birthday-staging" >> $GITHUB_OUTPUT
          fi
      - name: Define Image Tag
        id: tag
        run: echo "tag=${{ github.sha }}" >> $GITHUB_OUTPUT
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}
          aws-region: ${{ steps.environment.outputs.aws_region }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ steps.environment.outputs.ecr_repo }}
          IMAGE_TAG: ${{ steps.tag.outputs.tag }}
        run: docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./app

  # --- STAGE 2: IMAGE SECURITY SCAN ---
  security-scan-trivy:
    name: Trivy Image Scan
    needs: build-docker-image
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ needs.build-docker-image.outputs.ecr_registry }}/${{ needs.build-docker-image.outputs.ecr_repo }}:${{ needs.build-docker-image.outputs.image_tag }}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

  # --- STAGE 3: PUBLISH ARTIFACTS ---
  publish-artifacts:
    name: Publish Artifacts to ECR
    needs: [security-scan-trivy, code-quality-sonar]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}
          aws-region: 'eu-west-1'
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Push Docker Image
        env:
          ECR_REGISTRY: ${{ needs.build-docker-image.outputs.ecr_registry }}
          ECR_REPOSITORY: ${{ needs.build-docker-image.outputs.ecr_repo }}
          IMAGE_TAG: ${{ needs.build-docker-image.outputs.image_tag }}
        run: docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      - name: Setup Helm
        uses: azure/setup-helm@v3
      # --- HELM DEPENDENCY UPDATE ---
      - name: Update Helm Chart Dependencies
        run: helm dependency update ./kubernetes/helm-charts/hello-birthday
      - name: Package and Push Helm Chart to ECR
        env:
          ECR_REGISTRY_ALIAS: ${{ steps.login-ecr.outputs.registry_alias }}
          ECR_REPOSITORY: ${{ needs.build-docker-image.outputs.ecr_repo }}
          CHART_VERSION: 1.0.${{ github.run_number }}
        run: |
          helm package ./kubernetes/helm-charts/hello-birthday --version $CHART_VERSION
          helm push hello-birthday-$CHART_VERSION.tgz oci://$ECR_REGISTRY_ALIAS/$ECR_REPOSITORY

  # --- NEW JOB: PREVIEW HELM CHART ON PR ---
  preview-helm-chart:
    name: Preview Helm Chart on PR
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Helm
        uses: azure/setup-helm@v3
      - name: Update Helm Chart Dependencies
        run: helm dependency update ./kubernetes/helm-charts/hello-birthday
      - name: Generate Helm Template
        id: template
        run: |
          helm template hello-birthday-app ./kubernetes/helm-charts/hello-birthday \
            --values ./kubernetes/helm-charts/hello-birthday/values-staging.yaml > template.yaml
          echo "output=$(cat template.yaml)" >> $GITHUB_OUTPUT
      - name: Comment PR with Helm Template
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Helm Template Preview üìù\`\n<details><summary>Click to expand</summary>\n\n\`\`\`yaml\n${{ steps.template.outputs.output }}\n\`\`\`\n</details>`;
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: output
            });

  # --- STAGE 4: DEPLOY INFRASTRUCTURE ---
  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Terragrunt
        uses: gruntwork-io/setup-terragrunt@v1
      - name: Determine Environment
        id: environment
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "env=pro" >> $GITHUB_OUTPUT
            echo "aws_region=eu-west-1" >> $GITHUB_OUTPUT
          else
            echo "env=staging" >> $GITHUB_OUTPUT
            echo "aws_region=eu-west-1" >> $GITHUB_OUTPUT
          fi
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}
          aws-region: ${{ steps.environment.outputs.aws_region }}
      - name: Terragrunt Apply
        if: github.event_name != 'pull_request'
        run: |
          cd infra
          terragrunt run-all apply --terragrunt-non-interactive -auto-approve

  # --- STAGE 5: DEPLOY APPLICATION ---
  deploy-application:
    name: Deploy Application to EKS
    needs: [publish-artifacts, deploy-infrastructure]
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Determine Environment
        id: environment
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "env=pro" >> $GITHUB_OUTPUT
            echo "aws_region=eu-west-1" >> $GITHUB_OUTPUT
            echo "cluster_name=eks-pro-birthday" >> $GITHUB_OUTPUT
          else
            echo "env=staging" >> $GITHUB_OUTPUT
            echo "aws_region=eu-west-1" >> $GITHUB_OUTPUT
            echo "cluster_name=eks-staging-birthday" >> $GITHUB_OUTPUT
          fi
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}
          aws-region: ${{ steps.environment.outputs.aws_region }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Setup Kubeconfig for EKS
        run: aws eks update-kubeconfig --name ${{ steps.environment.outputs.cluster_name }} --region ${{ steps.environment.outputs.aws_region }}
      - name: Setup Helm
        uses: azure/setup-helm@v3
      - name: Deploy with Helm from OCI Registry
        env:
          ECR_REGISTRY_ALIAS: ${{ steps.login-ecr.outputs.registry_alias }}
          ECR_REPOSITORY: ${{ needs.build-docker-image.outputs.ecr_repo }}
          CHART_VERSION: 1.0.${{ github.run_number }}
        run: |
          helm upgrade --install hello-birthday-app oci://$ECR_REGISTRY_ALIAS/$ECR_REPOSITORY/hello-birthday \
            --version $CHART_VERSION \
            --namespace default \
            --values ./kubernetes/helm-charts/hello-birthday/values-${{ steps.environment.outputs.env }}.yaml \
            --wait

  # --- TEST HELM RELEASE ---
  test-helm-release:
    name: Test Helm Release
    needs: deploy-application
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Determine Environment
        id: environment
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "env=pro" >> $GITHUB_OUTPUT
            echo "aws_region=eu-west-1" >> $GITHUB_OUTPUT
            echo "cluster_name=eks-pro-birthday" >> $GITHUB_OUTPUT
          else
            echo "env=staging" >> $GITHUB_OUTPUT
            echo "aws_region=eu-west-1" >> $GITHUB_OUTPUT
            echo "cluster_name=eks-staging-birthday" >> $GITHUB_OUTPUT
          fi
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}
          aws-region: ${{ steps.environment.outputs.aws_region }}
      - name: Setup Kubeconfig for EKS
        run: aws eks update-kubeconfig --name ${{ steps.environment.outputs.cluster_name }} --region ${{ steps.environment.outputs.aws_region }}
      - name: Setup Helm
        uses: azure/setup-helm@v3
      - name: Run Helm Test
        run: helm test hello-birthday-app --namespace default
