replicaCount: 1

image:
  repository: # fill in from pipeline
  pullPolicy: IfNotPresent
  tag: "" # fill in from pipeline

service:
  type: ClusterIP
  port: 80

# --- advanced scheduling configuration ---
nodeSelector: {}

affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/name
            operator: In
            values:
            - hello-birthday
        topologyKey: "topology.kubernetes.io/zone"

tolerations: []

# --- Database Configuration (Postgres with Zalando Operator) ---
postgres:
  enabled: true
  replicas: 3
  volumeSize: "10Gi"
  version: "15"
  s3WalBucket: "" # fill in from pipeline
  teamId: "birthday-team"


# --- OPENTELEMETRY ---

# Configuration for the sub-chart ADOT (AWS Distro for OpenTelemetry) inheritance mechanism
adot:
  enabled: true # sub-chart is enabled
  roleArn: "" # fill in from pipeline
  prometheusEndpoint: ""

  # Collector configuration
  collector:
    # The collector will run as a Deployment in the cluster.
    daemonSet: false
    deployment: true

    # Configuración del Service Account que usará el colector
    serviceAccount:
      create: true
      name: "adot-collector-sa" # Must match the name in the IAM role in Terraform
      annotations:
        # this annotation binds the service account to the IAM role
        eks.amazonaws.com/role-arn: "" # fill in from pipeline

    # Colector configuration itself
    # here are defined the pipelines for telemetría: receivers, processors, exporters.
    config:
      # Exporters: where to send the data?
      exporters:
        awsprometheusremotewrite:
          # The URL of the prometheus remote write endpoint.
          # Will be filled in from the pipeline.
          endpoint: ""

      # Receivers: What data do we want to collect?
      receivers:
        prometheus:
          config:
            scrape_configs:
              - job_name: 'hello-birthday-app'
                scrape_interval: 15s
                # The collector will look for pods with the annotation `app.kubernetes.io/name=hello-birthday`
                # and will scrape metrics from them.
                kubernetes_sd_configs:
                  - role: pod
                relabel_configs:
                  - source_labels: [__meta_kubernetes_pod_annotation_app_kubernetes_io_name]
                    action: keep
                    regex: hello-birthday

      # Services: enables the pipelines for the collector
      service:
        pipelines:
          metrics:
            receivers: [prometheus]
            exporters: [awsprometheusremotewrite]

# --- Ingress Configuration ---
ingress:
  enabled: true
  className: "alb" # Especifica que queremos usar el AWS Load Balancer Controller
  annotations:
    # Anotaciones específicas del AWS Load Balancer Controller
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
  hosts:
    - host: hello-birthday.yourdomain.com # <-- ¡CAMBIA ESTO!
      paths:
        - path: /
          pathType: Prefix
  tls: []